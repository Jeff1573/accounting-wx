---
description: API 接口设计规范，前后端接口约定
---

# API 接口设计规范

## 接口命名规范

### 1. URL 命名

```
✅ 正确：使用名词复数 + RESTful 动词
GET    /api/rooms              获取账本列表
GET    /api/rooms/:id          获取单个账本
POST   /api/rooms              创建账本
PUT    /api/rooms/:id          更新账本
DELETE /api/rooms/:id          删除账本

GET    /api/rooms/:id/members  获取账本成员
POST   /api/rooms/join         加入账本（通过邀请码）

❌ 错误：使用动词或中文拼音
POST   /api/getRooms
POST   /api/createRoom
GET    /api/zhangben
```

### 2. 路由分组

```typescript
// 认证相关
/api/auth/wx-login          微信登录
/api/auth/refresh-token     刷新 token

// 账本相关
/api/rooms                  账本 CRUD
/api/rooms/:id/members      账本成员管理
/api/rooms/join             加入账本

// 交易记录相关
/api/transactions           交易记录 CRUD
/api/transactions/stats     统计数据
```

## 请求格式规范

### 1. 请求方法

```
GET     查询数据（幂等）
POST    创建数据（非幂等）
PUT     完整更新（幂等）
PATCH   部分更新（幂等）
DELETE  删除数据（幂等）
```

### 2. 请求参数

#### Query 参数（用于 GET 请求）

```typescript
// ✅ 正确：用于过滤、排序、分页
GET /api/transactions?roomId=xxx&page=1&limit=20&type=expense

interface QueryParams {
  roomId: string;
  page?: number;
  limit?: number;
  type?: 'income' | 'expense';
  startDate?: string;
  endDate?: string;
}
```

#### Path 参数（用于资源标识）

```typescript
// ✅ 正确：用于标识具体资源
GET    /api/rooms/:id
PUT    /api/rooms/:id
DELETE /api/rooms/:id

// 嵌套资源
GET /api/rooms/:roomId/transactions
```

#### Body 参数（用于 POST/PUT 请求）

```typescript
// ✅ 正确：创建账本
POST /api/rooms
Content-Type: application/json

{
  "name": "家庭账本",
  "description": "记录家庭日常开支",
  "icon": "home"
}

// ✅ 正确：创建交易记录
POST /api/transactions
Content-Type: application/json

{
  "roomId": "uuid",
  "amount": 100.50,
  "type": "expense",
  "category": "餐饮",
  "description": "午餐",
  "date": "2024-01-15"
}
```

## 响应格式规范

### 1. 统一响应结构

```typescript
/**
 * 统一 API 响应格式
 */
interface ApiResponse<T = any> {
  code: number;      // 业务状态码
  message: string;   // 提示信息
  data?: T;          // 响应数据
}
```

### 2. 成功响应

```typescript
// ✅ 查询成功（有数据）
{
  "code": 200,
  "message": "查询成功",
  "data": {
    "id": "uuid",
    "name": "家庭账本",
    "createdAt": "2024-01-15T10:30:00Z"
  }
}

// ✅ 查询成功（列表数据）
{
  "code": 200,
  "message": "查询成功",
  "data": {
    "list": [
      { "id": "1", "name": "账本1" },
      { "id": "2", "name": "账本2" }
    ],
    "total": 2,
    "page": 1,
    "pageSize": 20
  }
}

// ✅ 操作成功（无返回数据）
{
  "code": 200,
  "message": "删除成功"
}
```

### 3. 错误响应

```typescript
// ✅ 客户端错误（400 系列）
{
  "code": 400,
  "message": "参数错误：amount 必须为正数"
}

{
  "code": 401,
  "message": "未授权，请先登录"
}

{
  "code": 403,
  "message": "无权限访问该账本"
}

{
  "code": 404,
  "message": "账本不存在"
}

// ✅ 服务器错误（500 系列）
{
  "code": 500,
  "message": "服务器内部错误"
}
```

### 4. HTTP 状态码使用

```typescript
200 OK                  成功
201 Created             创建成功
204 No Content          删除成功（无返回内容）

400 Bad Request         参数错误
401 Unauthorized        未授权
403 Forbidden           无权限
404 Not Found           资源不存在
409 Conflict            资源冲突（如邀请码已存在）

500 Internal Server Error  服务器错误
503 Service Unavailable    服务不可用
```

## 分页规范

### 1. 分页请求

```typescript
// ✅ 正确：使用 page 和 limit
GET /api/transactions?page=1&limit=20

interface PaginationQuery {
  page?: number;      // 页码，从 1 开始，默认 1
  limit?: number;     // 每页数量，默认 20，最大 100
}
```

### 2. 分页响应

```typescript
// ✅ 正确：返回完整分页信息
{
  "code": 200,
  "message": "查询成功",
  "data": {
    "list": [...],           // 当前页数据
    "total": 150,            // 总记录数
    "page": 1,               // 当前页码
    "pageSize": 20,          // 每页数量
    "totalPages": 8          // 总页数
  }
}
```

## 排序规范

```typescript
// ✅ 正确：使用 sortBy 和 order
GET /api/transactions?sortBy=createdAt&order=desc

interface SortQuery {
  sortBy?: string;    // 排序字段：createdAt, amount 等
  order?: 'asc' | 'desc';  // 排序方向：asc 升序，desc 降序
}
```

## 过滤规范

```typescript
// ✅ 正确：多条件过滤
GET /api/transactions?roomId=xxx&type=expense&startDate=2024-01-01&endDate=2024-01-31

interface FilterQuery {
  roomId: string;
  type?: 'income' | 'expense';
  category?: string;
  startDate?: string;    // ISO 8601 格式
  endDate?: string;
}
```

## 接口版本管理

```typescript
// ✅ 推荐：URL 路径版本（当前使用）
/api/v1/rooms
/api/v2/rooms

// ✅ 备选：请求头版本
GET /api/rooms
Headers: { "API-Version": "1.0" }
```

## 认证规范

### 1. Token 传递

```typescript
// ✅ 正确：使用 Authorization header
GET /api/rooms
Headers: {
  "Authorization": "Bearer <token>"
}

// ❌ 错误：使用 Query 参数（不安全）
GET /api/rooms?token=xxx
```

### 2. Token 刷新

```typescript
// ✅ 正确：独立的刷新接口
POST /api/auth/refresh-token
Headers: {
  "Authorization": "Bearer <refresh_token>"
}

Response:
{
  "code": 200,
  "message": "刷新成功",
  "data": {
    "token": "new_access_token",
    "expiresIn": 604800  // 7 天，单位秒
  }
}
```

## 错误码规范

### 1. 业务错误码

```typescript
// 通用错误码 (1xxx)
1000  未知错误
1001  参数错误
1002  参数缺失
1003  参数格式错误

// 认证错误码 (2xxx)
2001  未登录
2002  Token 无效
2003  Token 过期
2004  无权限

// 账本错误码 (3xxx)
3001  账本不存在
3002  邀请码无效
3003  已是账本成员
3004  不是账本成员
3005  不能退出自己创建的账本

// 交易记录错误码 (4xxx)
4001  交易记录不存在
4002  金额必须为正数
4003  日期格式错误
```

### 2. 错误响应示例

```typescript
// ✅ 正确：携带错误码
{
  "code": 3002,
  "message": "邀请码无效或已过期"
}

{
  "code": 4002,
  "message": "金额必须为正数",
  "data": {
    "field": "amount",
    "value": -100
  }
}
```

## 接口文档示例

### 1. 微信登录

```typescript
/**
 * 微信登录
 * 
 * @route POST /api/auth/wx-login
 * @access Public
 */
Request:
{
  "code": "071abc123def",        // 微信登录凭证
  "nickname": "张三",            // 用户昵称
  "avatar": "https://..."       // 用户头像
}

Response:
{
  "code": 200,
  "message": "登录成功",
  "data": {
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "userInfo": {
      "id": "uuid",
      "nickname": "张三",
      "avatar": "https://..."
    },
    "expiresIn": 604800  // 7 天
  }
}
```

### 2. 获取账本列表

```typescript
/**
 * 获取账本列表
 * 
 * @route GET /api/rooms
 * @access Private
 * @param {number} page - 页码（可选，默认 1）
 * @param {number} limit - 每页数量（可选，默认 20）
 */
Request:
GET /api/rooms?page=1&limit=20
Headers: {
  "Authorization": "Bearer <token>"
}

Response:
{
  "code": 200,
  "message": "查询成功",
  "data": {
    "list": [
      {
        "id": "uuid",
        "name": "家庭账本",
        "description": "记录家庭日常开支",
        "icon": "home",
        "inviteCode": "ABC123",
        "creator": {
          "id": "uuid",
          "nickname": "张三",
          "avatar": "https://..."
        },
        "memberCount": 3,
        "createdAt": "2024-01-15T10:30:00Z"
      }
    ],
    "total": 5,
    "page": 1,
    "pageSize": 20,
    "totalPages": 1
  }
}
```

### 3. 创建交易记录

```typescript
/**
 * 创建交易记录
 * 
 * @route POST /api/transactions
 * @access Private
 */
Request:
POST /api/transactions
Headers: {
  "Authorization": "Bearer <token>",
  "Content-Type": "application/json"
}
Body:
{
  "roomId": "uuid",              // 账本 ID（必填）
  "amount": 100.50,              // 金额（必填，正数）
  "type": "expense",             // 类型（必填，income 或 expense）
  "category": "餐饮",            // 分类（必填）
  "description": "午餐",         // 描述（可选）
  "date": "2024-01-15"           // 日期（可选，默认当前日期）
}

Response:
{
  "code": 200,
  "message": "创建成功",
  "data": {
    "id": "uuid",
    "roomId": "uuid",
    "amount": 100.50,
    "type": "expense",
    "category": "餐饮",
    "description": "午餐",
    "date": "2024-01-15",
    "user": {
      "id": "uuid",
      "nickname": "张三",
      "avatar": "https://..."
    },
    "createdAt": "2024-01-15T12:30:00Z"
  }
}
```

### 4. 获取账本统计

```typescript
/**
 * 获取账本统计数据
 * 
 * @route GET /api/transactions/stats
 * @access Private
 * @param {string} roomId - 账本 ID（必填）
 * @param {string} startDate - 开始日期（可选）
 * @param {string} endDate - 结束日期（可选）
 */
Request:
GET /api/transactions/stats?roomId=uuid&startDate=2024-01-01&endDate=2024-01-31
Headers: {
  "Authorization": "Bearer <token>"
}

Response:
{
  "code": 200,
  "message": "查询成功",
  "data": {
    "totalIncome": 5000.00,      // 总收入
    "totalExpense": 3500.50,     // 总支出
    "balance": 1499.50,          // 结余
    "categoryStats": [           // 分类统计
      {
        "category": "餐饮",
        "amount": 1200.00,
        "count": 35,
        "percentage": 34.3
      },
      {
        "category": "交通",
        "amount": 500.00,
        "count": 12,
        "percentage": 14.3
      }
    ],
    "dailyStats": [              // 每日统计
      {
        "date": "2024-01-15",
        "income": 0,
        "expense": 150.00
      }
    ]
  }
}
```

## 前端调用示例

参考关键文件：
- 认证 API：[auth.ts](mdc:frontend/src/api/auth.ts)
- 账本 API：[room.ts](mdc:frontend/src/api/room.ts)
- 交易 API：[transaction.ts](mdc:frontend/src/api/transaction.ts)

```typescript
// ✅ 正确：前端 API 调用
import { post, get } from '@/utils/request';

/**
 * 微信登录
 */
export function wxLogin(params: {
  code: string;
  nickname: string;
  avatar: string;
}) {
  return post<{
    token: string;
    userInfo: UserInfo;
    expiresIn: number;
  }>('/auth/wx-login', params);
}

/**
 * 获取账本列表
 */
export function getRoomList(params?: {
  page?: number;
  limit?: number;
}) {
  return get<{
    list: Room[];
    total: number;
    page: number;
    pageSize: number;
    totalPages: number;
  }>('/rooms', params);
}

/**
 * 创建交易记录
 */
export function createTransaction(params: {
  roomId: string;
  amount: number;
  type: 'income' | 'expense';
  category: string;
  description?: string;
  date?: string;
}) {
  return post<Transaction>('/transactions', params);
}
```

## 接口测试规范

### 1. 使用 Postman/Apifox 测试

```
环境变量：
- base_url: http://localhost:3000/api
- token: Bearer <your_token>

请求集合：
├── Auth（认证）
│   ├── 微信登录
│   └── 刷新 Token
├── Rooms（账本）
│   ├── 获取账本列表
│   ├── 获取账本详情
│   ├── 创建账本
│   ├── 更新账本
│   ├── 删除账本
│   └── 加入账本
└── Transactions（交易）
    ├── 获取交易列表
    ├── 创建交易
    ├── 更新交易
    ├── 删除交易
    └── 获取统计数据
```

### 2. 错误场景测试

```typescript
// 必须测试的场景
1. ✅ 缺少必填参数
2. ✅ 参数格式错误
3. ✅ 未授权访问（不带 token）
4. ✅ Token 过期
5. ✅ 无权限访问（访问他人资源）
6. ✅ 资源不存在
7. ✅ 重复创建（邀请码冲突等）
8. ✅ 边界值测试（金额为 0、负数等）
```
