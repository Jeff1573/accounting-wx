---
alwaysApply: true
---

# 分层架构规范

## 核心原则

> **依赖只能从上往下，永远不能从下往上！**

```
页面/组件 → Store → API → Utils → Config
```

## 分层规则

| 层级 | 位置 | 可以依赖 | 禁止依赖 |
|-----|------|---------|---------|
| **Config** | `src/config/` | 无 | 所有层 |
| **Utils** | `src/utils/` | Config | API、Store、页面/组件 |
| **API** | `src/api/` | Utils、Config | Store、页面/组件 |
| **Store** | `src/stores/` | API、Utils、Config | 其他 Store（避免循环）、页面/组件 |
| **页面/组件** | `src/pages/`, `src/components/` | 所有下层 | 其他页面/组件（避免循环）|

## 循环依赖解决方案

### 依赖注入模式（推荐）

```typescript
// ✅ utils/request.ts - 不直接导入 Store
let tokenGetter: (() => string) | null = null;

export function initRequest(getToken: () => string) {
  tokenGetter = getToken;
}

// ✅ App.vue - 注入依赖
import { initRequest } from '@/utils/request';
import { useUserStore } from '@/stores/user';

onLaunch(() => {
  const userStore = useUserStore();
  initRequest(() => userStore.token);
});
```

## 检查清单

代码提交前必须检查：
1. ✅ 依赖方向是否从上往下？
2. ✅ Utils 层是否无业务逻辑？
3. ✅ API 层是否未依赖 Store？
4. ✅ 是否存在循环依赖？
