---
alwaysApply: true
---
# 工作总则 (必须严格遵守)
1. **语言与清理**: 所有沟通、文档和代码注释都必须使用简体中文。在功能开发完成并经我确认后，你必须主动删除所有测试/临时脚本，并在工作流文档中更新标记。
2. **主动沟通**: 如果我的需求描述不清晰或存在歧义，你必须首先向我提问以澄清，而不是基于假设进行工作。
3. **思路透明**: 在任何重要步骤（如技术选型、任务拆分）之前，必须先阐述你的核心思路。
4. **严守流程**: 严格遵循下述的“核心工作流”，不跳步、不抢跑。
5. **处理障碍**: 在执行任何任务时如果遇到困难或发现当前方案不可行，必须立即停止，向我报告问题并等待指示。
6. **错误检测**：在回答结束前，检测该次回答中修改/创建的文件是否有类型错误（自动识别语言），如果存在语言类型警告报错，修复它。
7. **类型规范**：类型能收窄就收窄：判空、判标签、in/typeof/instanceof 自定义类型守卫。
8. **文档生成**：不要创建任何文档。
9. **测试验证**：优先告知用户自己验证，不要直接执行任何验证命令或脚本。
10. **代码实现（严格遵守）**

   - 在创建任何函数、模块，添加适当且标准的的 jsdoc 注释, 例如:
     >
     ```js
     /**
      * 计算两个数的和。
      *
      * @param {number} a - 第一个加数
      * @param {number} b - 第二个加数
      * @returns {number} 两个数的和
      *
      * @example
      * // 返回 5
      * add(2, 3);
      */
     function add(a, b) {
       return a + b;
     }
     ```
   - **创建文件的时候添加该文件的 document 说明。**
   - **实现代码前分析代码中是否有需要抽离成单独模块/组件的代码,如果有则进行模块/组件单独提取实现**
   - **实现完成后通知agent使用Linter检测是否存在错误**

# 禁止行为（重要）
- **禁止ESM 导入的时候，统一在文件顶部导入，禁止在代码内导入**

   
# 强制流程（不得跳过）

**1. 任务分析与 API 评估 (Task Analysis & API Assessment)**

- **识别核心库/模块:** 解析任务需求，确定需要使用的关键库和模块。
- **API 信任度分级:** 在动手编码前，对计划调用的 API 进行快速评估，并将其归入以下三个等级之一：
  - **L0 - 核心/标准库 API (Core/Standard API):**
    - **定义:** 编程语言内置的函数、标准库中的常用 API（如 Python 的 `os`, `json`, `sys` 模块中的常见函数）。这些是 Agent 的“本能知识”。
    - **审查策略:** **免除文档查证。** 直接使用，并相信内部知识。
  - **L1 - 熟知的第三方库 API (Well-Known Third-party API):**
    - **定义:** 社区广泛使用、Agent 已有丰富经验的库（如 `requests`, `pandas`, `numpy` 等）中的常见用法。例如 `requests.get()` 或 `pandas.DataFrame()`。
    - **审查策略:** **默认信任，按需查证。** 直接编写代码。只有在遇到不确定用法、复杂参数或编译/运行时错误时，才触发**针对性的文档搜索**（例如，直接搜索“pandas.DataFrame merge how-to”），而不是从库的主页开始。
  - **L2 - 全新/复杂/关键 API (New/Complex/Critical API):**
    - **定义:** 不熟悉的小众库、库中不常用的高级功能、涉及安全/权限等关键操作的 API，或配置项复杂的 API。
    - **审查策略:** **执行严格的文档查证流程。** 在这种情况下，才启用您原来定义的“文档发现”和“证据采集”流程，确保万无一失。

**2. 分级实现与即时验证 (Tiered Implementation & Just-in-Time Verification)**

1.  **第一步：快速本地查询 (Attempt Fast, Local Lookup)**

    - Agent **首先**调用相关`tool`，如`exa-code`/`context7`查询。
    - 这个工具被期望能快速返回一个结构化的、来自官方文档的、带有版本信息的数据。

2.  **第二步：结果验证与决策 (Validate & Decide)**

    - **成功命中:** 如果工具返回了与项目要求版本匹配的、可信的 API 信息，则证据采集完成。**Agent 可以跳过 Web 搜索，直接进入实现阶段。** 这将节省大量时间。
    - **版本不匹配:** 如果返回的 API 文档版本过旧，Agent 应记录下基础信息，但仍需触发 Web Search 来查找最新版本的差异。
    - **查询失败:** 如果工具中没有收录该 API（例如，库太新或太小众），则查询失败。

3.  **第三步：回退到权威来源 (Fallback to Authoritative Source)**
    - 在**查询失败**或**版本不匹配**的情况下，Agent **回退到使用 Web Search**。
    - 此时 Web Search 的目标变得更明确：一是查找最新官方文档，二是补充本地工具缺失的信息。

**3. 动态自检 (Dynamic Self-Check)**

- 审查的重点应放在 **L2 级别 API** 的调用点上，确保其严格对应文档。
- 对于 **L1 级别 API**，自检的重点是确认其用法是否在“常见”范畴内。如果代码逻辑变得复杂，应考虑将其“升级”到 L2 进行更严格的审查。
- **L0 级别 API** 无需自检。

**4. 知识库沉淀与学习 (Knowledge Base Enhancement)**

- 当一个 **L2 级别** 的 API 被成功验证和使用后，应将其用法、关键参数和文档链接摘要存入 `.workflow/memory`。
- **关键优化点:** 在未来执行任务时，Agent 应**首先查询内部知识库**。如果命中，一个原本的 L2 级 API 就可以在本任务中被**降级为 L1 级**来处理，从而极大提升了“再学习”的效率。

# 组件构建原则
- 绝对遵守逻辑状态分离的原则进行组件构建
- 尽量使用现有模块、组件、工具进行组件构建