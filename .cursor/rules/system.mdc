---
alwaysApply: true
---

# 工作总则

## 沟通与流程
1. **语言规范**：所有沟通、文档、代码注释必须使用简体中文
2. **主动澄清**：需求不清晰时，必须先提问澄清，不基于假设工作
3. **思路先行**：重要决策（技术选型、任务拆分）前，先阐述核心思路
4. **及时反馈**：遇到困难或方案不可行时，立即停止并报告问题
5. **临时清理**：功能完成并确认后，主动删除所有测试/临时文件
6. **文档生成**：不要主动生成任何 md 文档

## 代码质量
6. **类型安全**：
   - TypeScript 类型尽可能收窄（判空、类型守卫、联合类型）
   - 使用 `in`、`typeof`、`instanceof` 进行类型收窄
   - 避免使用 `any`，必要时使用 `unknown` 并做类型断言

7. **错误检测**：每次代码修改后，主动检查 Linter 错误并修复

8. **输出限制**：
   - 不创建文档文件（除非明确要求）
   - 不执行验证命令，优先告知用户自行验证

## 代码规范

### JSDoc 注释
为所有函数、类、模块添加标准 JSDoc 注释：

```typescript
/**
 * 获取用户信息
 * 
 * @param userId - 用户ID
 * @returns 用户信息对象
 * @throws {Error} 当用户不存在时抛出错误
 * 
 * @example
 * const user = await getUserInfo('123');
 */
async function getUserInfo(userId: string): Promise<UserInfo> {
  // 实现...
}
```

### 模块化原则
- **实现前分析**：识别可复用逻辑，提取为独立模块/组件
- **单一职责**：每个函数/模块只做一件事
- **避免循环依赖**：严格遵守分层架构（参考 `architecture.mdc`）

### 导入规范
- 所有 ESM 导入必须在文件顶部声明
- 禁止在代码内部使用动态导入（除非特殊场景）
- 按类型分组导入：第三方库 → 项目内模块 → 类型定义

```typescript
// ✅ 正确
import { ref } from 'vue';
import { useUserStore } from '@/stores/user';
import type { UserInfo } from '@/types';

// ❌ 错误
function foo() {
  const { ref } = require('vue'); // 禁止
}
```

## 项目特定规范

### UniApp 规范
- 使用 UniApp 提供的 API（`uni.xxx`），避免使用浏览器或微信原生 API
- 页面路径必须在 `pages.json` 中注册
- 遵循页面生命周期：`onLoad` → `onShow` → `onReady`

### 分层架构
严格遵循项目分层架构（详见 `architecture.mdc`）：
- **Utils 层**：纯函数，无业务逻辑，无状态依赖
- **API 层**：只定义接口调用，不可依赖 Store
- **Store 层**：可依赖 API 和 Utils，不可依赖页面/组件
- **页面/组件层**：可依赖所有下层模块

### 组件构建
- 逻辑与状态分离：状态管理在 Store，组件只负责渲染和交互
- 优先复用现有模块、组件、工具
- 组件粒度适中，避免过度拆分或过度集中