# 项目名称（解决中文目录名导致的项目名为空问题）
name: accounting-miniapp

services:
  # MySQL 数据库服务
  mysql:
    image: mysql:8.0
    container_name: accounting-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root_password}
      MYSQL_DATABASE: ${DB_NAME:-accounting_miniapp}
      MYSQL_USER: ${MYSQL_USER:-accounting_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-your_secure_password}
      TZ: Asia/Shanghai
    volumes:
      # 数据持久化
      - mysql_data:/var/lib/mysql
      # 数据库初始化脚本
      - ./数据库初始化.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-root_password}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - accounting-network

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: accounting-backend
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      # 从 .env 文件加载环境变量
      PORT: ${PORT:-3000}
      NODE_ENV: ${NODE_ENV:-production}
      DB_HOST: mysql
      DB_PORT: ${DB_PORT:-3306}
      DB_NAME: ${DB_NAME:-accounting_miniapp}
      DB_USER: ${MYSQL_USER:-accounting_user}
      DB_PASSWORD: ${MYSQL_PASSWORD:-your_secure_password}
      JWT_SECRET: ${JWT_SECRET}
      WX_APPID: ${WX_APPID}
      WX_SECRET: ${WX_SECRET}
      TZ: Asia/Shanghai
    ports:
      # 映射端口到宿主机
      - "${PORT:-3000}:3000"
    volumes:
      # 上传文件持久化
      - uploads_data:/app/uploads
    networks:
      - accounting-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# 网络配置
networks:
  accounting-network:
    driver: bridge

# Volume 持久化
volumes:
  # MySQL 数据
  mysql_data:
    driver: local
  # 上传文件
  uploads_data:
    driver: local

